datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  hashedPassword String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?

  customerId     String?
  variantId      String?
  hasAccess      Boolean @default(false)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  websites       Website[]
  brandedKeywords BrandedKeyword[]
  topicClusters  TopicCluster[]
  contentGroups  ContentGroup[]
  topics        Topic[]
  posts         Post[]
  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  scope             String?
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model VerificationToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verificationTokens")
}

model Website {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  userId               String                 @db.ObjectId
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  siteUrl              String                 @unique
  name                 String?
  tracked              Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  dailyPerformanceData DailyPerformanceData[]
  topics               Topic[]
  posts                Post[]

  @@index([userId])
  @@map("websites")
}

model DailyPerformanceData {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  websiteId  String   @db.ObjectId
  website    Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  date       DateTime @db.Date
  clicks     Int
  impressions Int
  ctr        Float
  position   Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([websiteId, date])
  @@index([websiteId])
  @@map("dailyPerformanceData")
}

model BrandedKeyword {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  keyword   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, keyword])
  @@index([userId])
  @@map("brandedKeywords")
}

model TopicCluster {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  rules     Json?    // Store filter rules (e.g., { type: 'contains', value: 'seo analytics' })
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
  @@map("topicClusters")
}

model ContentGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  rules     Json?    // Store filter rules (e.g., { type: 'contains', value: '/blog/' })
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
  @@map("contentGroups")
}

model Topic {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  keywords    String[] // Array of keywords
  searchIntent String?
  websiteId   String?  @db.ObjectId
  website     Website? @relation(fields: [websiteId], references: [id], onDelete: SetNull)
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([websiteId])
  @@map("topics")
}

model Post {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  topicId         String?  @db.ObjectId
  topic           Topic?   @relation(fields: [topicId], references: [id], onDelete: SetNull)
  websiteId       String?  @db.ObjectId
  website         Website? @relation(fields: [websiteId], references: [id], onDelete: SetNull)
  title           String
  content         String   @db.String // Markdown content
  metaDescription String?
  keywords        String[] // Array of keywords
  estimatedReadTime Int?
  wordCount       Int?
  published       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([topicId])
  @@index([websiteId])
  @@map("posts")
}
